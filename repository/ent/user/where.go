// Code generated by ent, DO NOT EDIT.

package user

import (
	"botx/repository/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// HashID applies equality check predicate on the "hash_id" field. It's identical to HashIDEQ.
func HashID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHashID, v))
}

// HashIDEQ applies the EQ predicate on the "hash_id" field.
func HashIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHashID, v))
}

// HashIDNEQ applies the NEQ predicate on the "hash_id" field.
func HashIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHashID, v))
}

// HashIDIn applies the In predicate on the "hash_id" field.
func HashIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHashID, vs...))
}

// HashIDNotIn applies the NotIn predicate on the "hash_id" field.
func HashIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHashID, vs...))
}

// HashIDGT applies the GT predicate on the "hash_id" field.
func HashIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHashID, v))
}

// HashIDGTE applies the GTE predicate on the "hash_id" field.
func HashIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHashID, v))
}

// HashIDLT applies the LT predicate on the "hash_id" field.
func HashIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHashID, v))
}

// HashIDLTE applies the LTE predicate on the "hash_id" field.
func HashIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHashID, v))
}

// HashIDContains applies the Contains predicate on the "hash_id" field.
func HashIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHashID, v))
}

// HashIDHasPrefix applies the HasPrefix predicate on the "hash_id" field.
func HashIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHashID, v))
}

// HashIDHasSuffix applies the HasSuffix predicate on the "hash_id" field.
func HashIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHashID, v))
}

// HashIDEqualFold applies the EqualFold predicate on the "hash_id" field.
func HashIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHashID, v))
}

// HashIDContainsFold applies the ContainsFold predicate on the "hash_id" field.
func HashIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHashID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
